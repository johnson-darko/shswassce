Every program has specific rules for core and elective subjects, sometimes with different grade thresholds. To handle this, you need a structured way to represent requirements and a small eligibility engine that can check a student‚Äôs grades against them. Here‚Äôs how you can go about it:

1Ô∏è‚É£ Represent Entry Requirements Structurally

Instead of storing requirements as plain text, convert them into a data model. Example using JSON:

{
  "program": "B.Ed. English",
  "core": {
    "English": "C6+",
    "Mathematics": "C6+",
    "Integrated Science": "C6+",
    "Social Studies": "C6+"
  },
  "electives": [
    {"subject": "English Literature", "min_grade": "C6"},
    {"subject": "Any other 2 electives", "min_grade": "C6", "max_total_points": 24}
  ]
}

{
  "program": "B.Sc. Computer Science",
  "core": {
    "English": "C6+",
    "Mathematics": "C6+",
    "Integrated Science": "C6+"
  },
  "electives": [
    {"subject": "Elective Mathematics", "min_grade": "B3"},
    {"subject": "Any other 2 electives", "min_grade": "C6"}
  ]
}


Core ‚Üí mandatory subjects

Electives ‚Üí choose among options, may have grade thresholds or max points

2Ô∏è‚É£ Collect Student Grades in the Same Format

Example:

{
  "English": "B3",
  "Mathematics": "B3",
  "Integrated Science": "C5",
  "Social Studies": "C4",
  "English Literature": "C5",
  "Biology": "C6",
  "Chemistry": "C6"
}

3Ô∏è‚É£ Eligibility Engine Logic

Check all core subjects: if any core subject < required grade ‚Üí ‚ùå Not eligible.

Check electives:

If specific electives are required, compare grades.

If ‚Äúany X electives,‚Äù pick the best X subjects to satisfy the requirement.

Calculate total points if needed (e.g., aggregate ‚â§ 24).

Return result:

‚úÖ Fully eligible

‚ö†Ô∏è Partially eligible (missing one elective or grade borderline)

‚ùå Not eligible

4Ô∏è‚É£ Implementation Idea (Python Pseudocode)
def check_eligibility(student_grades, program_req):
    # Check cores
    for subject, min_grade in program_req["core"].items():
        if student_grades.get(subject, "F") > min_grade:
            return "‚ùå Not eligible: Core subject requirement not met"
    
    # Check electives
    electives = program_req["electives"]
    elective_passed = 0
    for elective in electives:
        if elective["subject"].startswith("Any"):
            # pick best X from available grades
            elective_passed += 1  # simplified
        else:
            grade = student_grades.get(elective["subject"], "F")
            if grade <= elective["min_grade"]:
                elective_passed += 1
    if elective_passed >= len(electives):
        return "‚úÖ Eligible"
    else:
        return "‚ö†Ô∏è Partially eligible"



You can refine the ‚ÄúAny X electives‚Äù logic with combinations and aggregate points later.

This engine can run on the backend and return eligibility results to the frontend dynamically.

üí° Key Tip

Convert all program requirements into a structured database or JSON format.

This allows your app to automatically compare student grades with any program‚Äôs rules, no matter how complex.