Got it — you want one app that (1) detects each school’s site structure, (2) scrapes the right pages, (3) normalizes program/fees/requirements, and (4) serves it to  features (search, compare, eligibility). Here’s a tight blueprint you can hand to devs.

One App to Handle Everything
1) Architecture (modules)

ingest/

schools.csv (name, domain, country)

(optional) “seed” URLs per school if you already know their Program/Fees pages

detector/

CMS/tech detector (headers + HTML fingerprints)

Output: cms_map.json → {domain: "wordpress" | "joomla" | "drupal" | "custom"}

crawler/

Site map discovery + focused crawl (Programs / Admissions / Fees pages)

Robots.txt respect + rate limit + retries

extractor/

Template-based extractors by CMS/template (config-driven selectors)

Per-site overrides when needed

normalizer/

Clean & standardize fields → Program, Level, Duration, TuitionLocal, TuitionIntl, Currency, EntryReq, Subjects, Cutoffs, Deadlines, Scholarships

eligibility/

Matching engine: compare student grades/subjects to program requirements; return ✅ Qualified / ⚠️ Borderline / ❌ Not eligible + “what to improve”

store/

DB (Postgres/MySQL): universities, programs, fees, requirements, scholarships, deadlines, sources, last_updated

api/

REST/GraphQL endpoints used by MyCampusMingle (search, compare, eligibility, deadlines)

admin/

Web admin to review diffs, approve changes, fix mappings, upload CSV/PDF from schools

scheduler/

Cron/worker to re-crawl monthly or when change detected

2) Data model (minimal, practical)

universities

id, name, domain, country, city

programs

id, university_id, name, level (Diploma/Undergrad/Masters), duration_months, language

requirements

id, program_id, req_text, subjects_json (e.g., { "Math": "B3+", "English": "C6+" }), tests_json (IELTS/SAT), notes

fees

id, program_id, tuition_local_amount, tuition_local_currency, tuition_intl_amount, tuition_intl_currency, year

deadlines

id, program_id, type (early/regular), date_iso

scholarships

id, university_id or program_id, name, amount, eligibility_text, link

sources

id, program_id, url, content_hash, last_seen

3) Smart workflow (how it runs)

Load schools → detect CMS

Crawl key pages (Programs, Admissions, Fees) based on CMS rules

Extract fields using template configs (selectors/regex)

Normalize + map subjects/grades into standard format (WASSCE, etc.)

Store rows + save source URLs + hash to detect changes

Serve via API to app (search → compare → eligibility)

Scheduler re-checks monthly; admin reviews diffs for tricky sites

4) Template-first extraction (cuts 119 to ~6–8 templates)

WordPress (common course directory patterns)

Joomla (e.g., index.php?option=com_* pages)

Drupal (/node/*, views tables)

PDF-only (download & parse)

Custom A, Custom B… (cluster by repeated CSS patterns you discover)